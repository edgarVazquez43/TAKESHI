# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/GetCubesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vision_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class GetCubesRequest(genpy.Message):
  _md5sum = "5d157fc83cf257e6044b1e57d3508700"
  _type = "vision_msgs/GetCubesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """vision_msgs/CubesSegmented cubes_input

================================================================================
MSG: vision_msgs/CubesSegmented
std_msgs/Header header
vision_msgs/Cube[] recog_cubes

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: vision_msgs/Cube
string color #color of the cube
geometry_msgs/Point cube_centroid		#Cube Centroid (x,y,z)
bool detected_cube    #flag to indicate if the cube was detected
geometry_msgs/Point minPoint	#Cube's min point
geometry_msgs/Point maxPoint	#Cube's max point

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['cubes_input']
  _slot_types = ['vision_msgs/CubesSegmented']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cubes_input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCubesRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cubes_input is None:
        self.cubes_input = vision_msgs.msg.CubesSegmented()
    else:
      self.cubes_input = vision_msgs.msg.CubesSegmented()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.cubes_input.header.seq, _x.cubes_input.header.stamp.secs, _x.cubes_input.header.stamp.nsecs))
      _x = self.cubes_input.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.cubes_input.recog_cubes)
      buff.write(_struct_I.pack(length))
      for val1 in self.cubes_input.recog_cubes:
        _x = val1.color
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.cube_centroid
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_B().pack(val1.detected_cube))
        _v2 = val1.minPoint
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = val1.maxPoint
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cubes_input is None:
        self.cubes_input = vision_msgs.msg.CubesSegmented()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.cubes_input.header.seq, _x.cubes_input.header.stamp.secs, _x.cubes_input.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cubes_input.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cubes_input.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cubes_input.recog_cubes = []
      for i in range(0, length):
        val1 = vision_msgs.msg.Cube()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.color = str[start:end].decode('utf-8')
        else:
          val1.color = str[start:end]
        _v4 = val1.cube_centroid
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.detected_cube,) = _get_struct_B().unpack(str[start:end])
        val1.detected_cube = bool(val1.detected_cube)
        _v5 = val1.minPoint
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.maxPoint
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.cubes_input.recog_cubes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.cubes_input.header.seq, _x.cubes_input.header.stamp.secs, _x.cubes_input.header.stamp.nsecs))
      _x = self.cubes_input.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.cubes_input.recog_cubes)
      buff.write(_struct_I.pack(length))
      for val1 in self.cubes_input.recog_cubes:
        _x = val1.color
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v7 = val1.cube_centroid
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_B().pack(val1.detected_cube))
        _v8 = val1.minPoint
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.maxPoint
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cubes_input is None:
        self.cubes_input = vision_msgs.msg.CubesSegmented()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.cubes_input.header.seq, _x.cubes_input.header.stamp.secs, _x.cubes_input.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cubes_input.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cubes_input.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cubes_input.recog_cubes = []
      for i in range(0, length):
        val1 = vision_msgs.msg.Cube()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.color = str[start:end].decode('utf-8')
        else:
          val1.color = str[start:end]
        _v10 = val1.cube_centroid
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.detected_cube,) = _get_struct_B().unpack(str[start:end])
        val1.detected_cube = bool(val1.detected_cube)
        _v11 = val1.minPoint
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = val1.maxPoint
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.cubes_input.recog_cubes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/GetCubesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vision_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class GetCubesResponse(genpy.Message):
  _md5sum = "be6b91864d949081c0a4e00a949d7867"
  _type = "vision_msgs/GetCubesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """vision_msgs/CubesSegmented cubes_output


================================================================================
MSG: vision_msgs/CubesSegmented
std_msgs/Header header
vision_msgs/Cube[] recog_cubes

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: vision_msgs/Cube
string color #color of the cube
geometry_msgs/Point cube_centroid		#Cube Centroid (x,y,z)
bool detected_cube    #flag to indicate if the cube was detected
geometry_msgs/Point minPoint	#Cube's min point
geometry_msgs/Point maxPoint	#Cube's max point

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['cubes_output']
  _slot_types = ['vision_msgs/CubesSegmented']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cubes_output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCubesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cubes_output is None:
        self.cubes_output = vision_msgs.msg.CubesSegmented()
    else:
      self.cubes_output = vision_msgs.msg.CubesSegmented()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.cubes_output.header.seq, _x.cubes_output.header.stamp.secs, _x.cubes_output.header.stamp.nsecs))
      _x = self.cubes_output.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.cubes_output.recog_cubes)
      buff.write(_struct_I.pack(length))
      for val1 in self.cubes_output.recog_cubes:
        _x = val1.color
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v13 = val1.cube_centroid
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_B().pack(val1.detected_cube))
        _v14 = val1.minPoint
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = val1.maxPoint
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cubes_output is None:
        self.cubes_output = vision_msgs.msg.CubesSegmented()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.cubes_output.header.seq, _x.cubes_output.header.stamp.secs, _x.cubes_output.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cubes_output.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cubes_output.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cubes_output.recog_cubes = []
      for i in range(0, length):
        val1 = vision_msgs.msg.Cube()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.color = str[start:end].decode('utf-8')
        else:
          val1.color = str[start:end]
        _v16 = val1.cube_centroid
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.detected_cube,) = _get_struct_B().unpack(str[start:end])
        val1.detected_cube = bool(val1.detected_cube)
        _v17 = val1.minPoint
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v18 = val1.maxPoint
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.cubes_output.recog_cubes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.cubes_output.header.seq, _x.cubes_output.header.stamp.secs, _x.cubes_output.header.stamp.nsecs))
      _x = self.cubes_output.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.cubes_output.recog_cubes)
      buff.write(_struct_I.pack(length))
      for val1 in self.cubes_output.recog_cubes:
        _x = val1.color
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v19 = val1.cube_centroid
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_B().pack(val1.detected_cube))
        _v20 = val1.minPoint
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v21 = val1.maxPoint
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cubes_output is None:
        self.cubes_output = vision_msgs.msg.CubesSegmented()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.cubes_output.header.seq, _x.cubes_output.header.stamp.secs, _x.cubes_output.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cubes_output.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.cubes_output.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cubes_output.recog_cubes = []
      for i in range(0, length):
        val1 = vision_msgs.msg.Cube()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.color = str[start:end].decode('utf-8')
        else:
          val1.color = str[start:end]
        _v22 = val1.cube_centroid
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.detected_cube,) = _get_struct_B().unpack(str[start:end])
        val1.detected_cube = bool(val1.detected_cube)
        _v23 = val1.minPoint
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = val1.maxPoint
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.cubes_output.recog_cubes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class GetCubes(object):
  _type          = 'vision_msgs/GetCubes'
  _md5sum = 'a2d88941f0bdf4936824e45f204e46ff'
  _request_class  = GetCubesRequest
  _response_class = GetCubesResponse
