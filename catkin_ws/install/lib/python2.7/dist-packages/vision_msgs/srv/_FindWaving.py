# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/FindWavingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FindWavingRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "vision_msgs/FindWavingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FindWavingRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/FindWavingResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vision_msgs.msg
import std_msgs.msg

class FindWavingResponse(genpy.Message):
  _md5sum = "a5efa18c4fad16dbe94cb16a4d7151ec"
  _type = "vision_msgs/FindWavingResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """vision_msgs/VisionRect[] bounding_box
std_msgs/Int32 frame_width
std_msgs/Int32 frame_height



================================================================================
MSG: vision_msgs/VisionRect
int32 x
int32 y
int32 width
int32 height

================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['bounding_box','frame_width','frame_height']
  _slot_types = ['vision_msgs/VisionRect[]','std_msgs/Int32','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bounding_box,frame_width,frame_height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FindWavingResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bounding_box is None:
        self.bounding_box = []
      if self.frame_width is None:
        self.frame_width = std_msgs.msg.Int32()
      if self.frame_height is None:
        self.frame_height = std_msgs.msg.Int32()
    else:
      self.bounding_box = []
      self.frame_width = std_msgs.msg.Int32()
      self.frame_height = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_box:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.x, _x.y, _x.width, _x.height))
      _x = self
      buff.write(_get_struct_2i().pack(_x.frame_width.data, _x.frame_height.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.bounding_box is None:
        self.bounding_box = None
      if self.frame_width is None:
        self.frame_width = std_msgs.msg.Int32()
      if self.frame_height is None:
        self.frame_height = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_box = []
      for i in range(0, length):
        val1 = vision_msgs.msg.VisionRect()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4i().unpack(str[start:end])
        self.bounding_box.append(val1)
      _x = self
      start = end
      end += 8
      (_x.frame_width.data, _x.frame_height.data,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_box:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.x, _x.y, _x.width, _x.height))
      _x = self
      buff.write(_get_struct_2i().pack(_x.frame_width.data, _x.frame_height.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.bounding_box is None:
        self.bounding_box = None
      if self.frame_width is None:
        self.frame_width = std_msgs.msg.Int32()
      if self.frame_height is None:
        self.frame_height = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_box = []
      for i in range(0, length):
        val1 = vision_msgs.msg.VisionRect()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4i().unpack(str[start:end])
        self.bounding_box.append(val1)
      _x = self
      start = end
      end += 8
      (_x.frame_width.data, _x.frame_height.data,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
class FindWaving(object):
  _type          = 'vision_msgs/FindWaving'
  _md5sum = 'a5efa18c4fad16dbe94cb16a4d7151ec'
  _request_class  = FindWavingRequest
  _response_class = FindWavingResponse
