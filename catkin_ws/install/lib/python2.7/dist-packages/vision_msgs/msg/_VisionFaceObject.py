# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/VisionFaceObject.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class VisionFaceObject(genpy.Message):
  _md5sum = "93b90fa2697ed03b7e1dd7001e2d8cff"
  _type = "vision_msgs/VisionFaceObject"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string id                                    #face id
float32 confidence                           #value in [0,1] indicating the probability of a correct identification
geometry_msgs/Point face_centroid            #Face Centroid (x,y,z)
geometry_msgs/Point[] bounding_box           #Face bounding box 2D 
bool smile                                   #smiling face
int8 gender                                  #Gender ID. 0: female, 1: male, 2: unknown

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','confidence','face_centroid','bounding_box','smile','gender']
  _slot_types = ['string','float32','geometry_msgs/Point','geometry_msgs/Point[]','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,confidence,face_centroid,bounding_box,smile,gender

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VisionFaceObject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = ''
      if self.confidence is None:
        self.confidence = 0.
      if self.face_centroid is None:
        self.face_centroid = geometry_msgs.msg.Point()
      if self.bounding_box is None:
        self.bounding_box = []
      if self.smile is None:
        self.smile = False
      if self.gender is None:
        self.gender = 0
    else:
      self.id = ''
      self.confidence = 0.
      self.face_centroid = geometry_msgs.msg.Point()
      self.bounding_box = []
      self.smile = False
      self.gender = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f3d().pack(_x.confidence, _x.face_centroid.x, _x.face_centroid.y, _x.face_centroid.z))
      length = len(self.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_box:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_Bb().pack(_x.smile, _x.gender))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.face_centroid is None:
        self.face_centroid = geometry_msgs.msg.Point()
      if self.bounding_box is None:
        self.bounding_box = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.confidence, _x.face_centroid.x, _x.face_centroid.y, _x.face_centroid.z,) = _get_struct_f3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_box = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_box.append(val1)
      _x = self
      start = end
      end += 2
      (_x.smile, _x.gender,) = _get_struct_Bb().unpack(str[start:end])
      self.smile = bool(self.smile)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f3d().pack(_x.confidence, _x.face_centroid.x, _x.face_centroid.y, _x.face_centroid.z))
      length = len(self.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_box:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_Bb().pack(_x.smile, _x.gender))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.face_centroid is None:
        self.face_centroid = geometry_msgs.msg.Point()
      if self.bounding_box is None:
        self.bounding_box = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.confidence, _x.face_centroid.x, _x.face_centroid.y, _x.face_centroid.z,) = _get_struct_f3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_box = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_box.append(val1)
      _x = self
      start = end
      end += 2
      (_x.smile, _x.gender,) = _get_struct_Bb().unpack(str[start:end])
      self.smile = bool(self.smile)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f3d = None
def _get_struct_f3d():
    global _struct_f3d
    if _struct_f3d is None:
        _struct_f3d = struct.Struct("<f3d")
    return _struct_f3d
_struct_Bb = None
def _get_struct_Bb():
    global _struct_Bb
    if _struct_Bb is None:
        _struct_Bb = struct.Struct("<Bb")
    return _struct_Bb
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
