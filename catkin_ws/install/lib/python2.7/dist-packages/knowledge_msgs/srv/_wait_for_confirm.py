# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from knowledge_msgs/wait_for_confirmRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import knowledge_msgs.msg

class wait_for_confirmRequest(genpy.Message):
  _md5sum = "60d2194f0127ca2638d85f847c92c9e3"
  _type = "knowledge_msgs/wait_for_confirmRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """RepeatedSentence repeat_sentence
int32 timeout

================================================================================
MSG: knowledge_msgs/RepeatedSentence
string sentence
int32 repeat_time
"""
  __slots__ = ['repeat_sentence','timeout']
  _slot_types = ['knowledge_msgs/RepeatedSentence','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       repeat_sentence,timeout

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(wait_for_confirmRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.repeat_sentence is None:
        self.repeat_sentence = knowledge_msgs.msg.RepeatedSentence()
      if self.timeout is None:
        self.timeout = 0
    else:
      self.repeat_sentence = knowledge_msgs.msg.RepeatedSentence()
      self.timeout = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.repeat_sentence.sentence
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.repeat_sentence.repeat_time, _x.timeout))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.repeat_sentence is None:
        self.repeat_sentence = knowledge_msgs.msg.RepeatedSentence()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.repeat_sentence.sentence = str[start:end].decode('utf-8')
      else:
        self.repeat_sentence.sentence = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.repeat_sentence.repeat_time, _x.timeout,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.repeat_sentence.sentence
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.repeat_sentence.repeat_time, _x.timeout))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.repeat_sentence is None:
        self.repeat_sentence = knowledge_msgs.msg.RepeatedSentence()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.repeat_sentence.sentence = str[start:end].decode('utf-8')
      else:
        self.repeat_sentence.sentence = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.repeat_sentence.repeat_time, _x.timeout,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from knowledge_msgs/wait_for_confirmResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class wait_for_confirmResponse(genpy.Message):
  _md5sum = "3150393c037475b6e3f74cfde86e6112"
  _type = "knowledge_msgs/wait_for_confirmResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool confirmation_received

"""
  __slots__ = ['confirmation_received']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       confirmation_received

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(wait_for_confirmResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.confirmation_received is None:
        self.confirmation_received = False
    else:
      self.confirmation_received = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.confirmation_received))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.confirmation_received,) = _get_struct_B().unpack(str[start:end])
      self.confirmation_received = bool(self.confirmation_received)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.confirmation_received))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.confirmation_received,) = _get_struct_B().unpack(str[start:end])
      self.confirmation_received = bool(self.confirmation_received)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class wait_for_confirm(object):
  _type          = 'knowledge_msgs/wait_for_confirm'
  _md5sum = 'aae0ce22da8fbc00ac2c3455196d2577'
  _request_class  = wait_for_confirmRequest
  _response_class = wait_for_confirmResponse
