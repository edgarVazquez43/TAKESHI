# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from knowledge_msgs/find_personRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class find_personRequest(genpy.Message):
  _md5sum = "129b97809ad0a5de0db4efc9d284c7f7"
  _type = "knowledge_msgs/find_personRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string person_face_id
string location
"""
  __slots__ = ['person_face_id','location']
  _slot_types = ['string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       person_face_id,location

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(find_personRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.person_face_id is None:
        self.person_face_id = ''
      if self.location is None:
        self.location = ''
    else:
      self.person_face_id = ''
      self.location = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.person_face_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.person_face_id = str[start:end].decode('utf-8')
      else:
        self.person_face_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location = str[start:end].decode('utf-8')
      else:
        self.location = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.person_face_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.person_face_id = str[start:end].decode('utf-8')
      else:
        self.person_face_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location = str[start:end].decode('utf-8')
      else:
        self.location = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from knowledge_msgs/find_personResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vision_msgs.msg
import geometry_msgs.msg

class find_personResponse(genpy.Message):
  _md5sum = "447e2e729a9086b0d48c8a37ddf7990f"
  _type = "knowledge_msgs/find_personResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """vision_msgs/VisionFaceObject person_face
bool task_success


================================================================================
MSG: vision_msgs/VisionFaceObject
string id                                    #face id
float32 confidence                           #value in [0,1] indicating the probability of a correct identification
geometry_msgs/Point face_centroid            #Face Centroid (x,y,z)
geometry_msgs/Point[] bounding_box           #Face bounding box 2D 
bool smile                                   #smiling face
int8 gender                                  #Gender ID. 0: female, 1: male, 2: unknown

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['person_face','task_success']
  _slot_types = ['vision_msgs/VisionFaceObject','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       person_face,task_success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(find_personResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.person_face is None:
        self.person_face = vision_msgs.msg.VisionFaceObject()
      if self.task_success is None:
        self.task_success = False
    else:
      self.person_face = vision_msgs.msg.VisionFaceObject()
      self.task_success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.person_face.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f3d().pack(_x.person_face.confidence, _x.person_face.face_centroid.x, _x.person_face.face_centroid.y, _x.person_face.face_centroid.z))
      length = len(self.person_face.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.person_face.bounding_box:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_BbB().pack(_x.person_face.smile, _x.person_face.gender, _x.task_success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.person_face is None:
        self.person_face = vision_msgs.msg.VisionFaceObject()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.person_face.id = str[start:end].decode('utf-8')
      else:
        self.person_face.id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.person_face.confidence, _x.person_face.face_centroid.x, _x.person_face.face_centroid.y, _x.person_face.face_centroid.z,) = _get_struct_f3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.person_face.bounding_box = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.person_face.bounding_box.append(val1)
      _x = self
      start = end
      end += 3
      (_x.person_face.smile, _x.person_face.gender, _x.task_success,) = _get_struct_BbB().unpack(str[start:end])
      self.person_face.smile = bool(self.person_face.smile)
      self.task_success = bool(self.task_success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.person_face.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f3d().pack(_x.person_face.confidence, _x.person_face.face_centroid.x, _x.person_face.face_centroid.y, _x.person_face.face_centroid.z))
      length = len(self.person_face.bounding_box)
      buff.write(_struct_I.pack(length))
      for val1 in self.person_face.bounding_box:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_BbB().pack(_x.person_face.smile, _x.person_face.gender, _x.task_success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.person_face is None:
        self.person_face = vision_msgs.msg.VisionFaceObject()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.person_face.id = str[start:end].decode('utf-8')
      else:
        self.person_face.id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.person_face.confidence, _x.person_face.face_centroid.x, _x.person_face.face_centroid.y, _x.person_face.face_centroid.z,) = _get_struct_f3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.person_face.bounding_box = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.person_face.bounding_box.append(val1)
      _x = self
      start = end
      end += 3
      (_x.person_face.smile, _x.person_face.gender, _x.task_success,) = _get_struct_BbB().unpack(str[start:end])
      self.person_face.smile = bool(self.person_face.smile)
      self.task_success = bool(self.task_success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f3d = None
def _get_struct_f3d():
    global _struct_f3d
    if _struct_f3d is None:
        _struct_f3d = struct.Struct("<f3d")
    return _struct_f3d
_struct_BbB = None
def _get_struct_BbB():
    global _struct_BbB
    if _struct_BbB is None:
        _struct_BbB = struct.Struct("<BbB")
    return _struct_BbB
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class find_person(object):
  _type          = 'knowledge_msgs/find_person'
  _md5sum = '0819b34699306bff12623f558a5cd6ca'
  _request_class  = find_personRequest
  _response_class = find_personResponse
