# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bbros_bridge/hd_lookatRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class hd_lookatRequest(genpy.Message):
  _md5sum = "e6fcb4f324f93c6ea919f38fa9ab0556"
  _type = "bbros_bridge/hd_lookatRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 goalPan
std_msgs/Float32 goalTilt

================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['goalPan','goalTilt']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goalPan,goalTilt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hd_lookatRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.goalPan is None:
        self.goalPan = std_msgs.msg.Float32()
      if self.goalTilt is None:
        self.goalTilt = std_msgs.msg.Float32()
    else:
      self.goalPan = std_msgs.msg.Float32()
      self.goalTilt = std_msgs.msg.Float32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.goalPan.data, _x.goalTilt.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.goalPan is None:
        self.goalPan = std_msgs.msg.Float32()
      if self.goalTilt is None:
        self.goalTilt = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.goalPan.data, _x.goalTilt.data,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.goalPan.data, _x.goalTilt.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.goalPan is None:
        self.goalPan = std_msgs.msg.Float32()
      if self.goalTilt is None:
        self.goalTilt = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.goalPan.data, _x.goalTilt.data,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bbros_bridge/hd_lookatResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class hd_lookatResponse(genpy.Message):
  _md5sum = "8a4d1a02761c4dadc5f5b2b059a7e3dc"
  _type = "bbros_bridge/hd_lookatResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 currentPan
std_msgs/Float32 currentTilt
std_msgs/String errors


================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['currentPan','currentTilt','errors']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       currentPan,currentTilt,errors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hd_lookatResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.currentPan is None:
        self.currentPan = std_msgs.msg.Float32()
      if self.currentTilt is None:
        self.currentTilt = std_msgs.msg.Float32()
      if self.errors is None:
        self.errors = std_msgs.msg.String()
    else:
      self.currentPan = std_msgs.msg.Float32()
      self.currentTilt = std_msgs.msg.Float32()
      self.errors = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.currentPan.data, _x.currentTilt.data))
      _x = self.errors.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.currentPan is None:
        self.currentPan = std_msgs.msg.Float32()
      if self.currentTilt is None:
        self.currentTilt = std_msgs.msg.Float32()
      if self.errors is None:
        self.errors = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.currentPan.data, _x.currentTilt.data,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errors.data = str[start:end].decode('utf-8')
      else:
        self.errors.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.currentPan.data, _x.currentTilt.data))
      _x = self.errors.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.currentPan is None:
        self.currentPan = std_msgs.msg.Float32()
      if self.currentTilt is None:
        self.currentTilt = std_msgs.msg.Float32()
      if self.errors is None:
        self.errors = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.currentPan.data, _x.currentTilt.data,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errors.data = str[start:end].decode('utf-8')
      else:
        self.errors.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
class hd_lookat(object):
  _type          = 'bbros_bridge/hd_lookat'
  _md5sum = '0d2267ae1acd4d7549c1a4e21fcad0ae'
  _request_class  = hd_lookatRequest
  _response_class = hd_lookatResponse
