// Generated by gencpp from file vision_msgs/VisionFaceObject.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_VISIONFACEOBJECT_H
#define VISION_MSGS_MESSAGE_VISIONFACEOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct VisionFaceObject_
{
  typedef VisionFaceObject_<ContainerAllocator> Type;

  VisionFaceObject_()
    : id()
    , confidence(0.0)
    , face_centroid()
    , bounding_box()
    , smile(false)
    , gender(0)  {
    }
  VisionFaceObject_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , confidence(0.0)
    , face_centroid(_alloc)
    , bounding_box(_alloc)
    , smile(false)
    , gender(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _face_centroid_type;
  _face_centroid_type face_centroid;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _bounding_box_type;
  _bounding_box_type bounding_box;

   typedef uint8_t _smile_type;
  _smile_type smile;

   typedef int8_t _gender_type;
  _gender_type gender;




  typedef boost::shared_ptr< ::vision_msgs::VisionFaceObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::VisionFaceObject_<ContainerAllocator> const> ConstPtr;

}; // struct VisionFaceObject_

typedef ::vision_msgs::VisionFaceObject_<std::allocator<void> > VisionFaceObject;

typedef boost::shared_ptr< ::vision_msgs::VisionFaceObject > VisionFaceObjectPtr;
typedef boost::shared_ptr< ::vision_msgs::VisionFaceObject const> VisionFaceObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::VisionFaceObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'vision_msgs': ['/home/hsr_pumas/HSR_PUMAS/catkin_ws/src/vision/vision_msgs/msg', '/home/hsr_pumas/HSR_PUMAS/catkin_ws/src/vision/vision_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::VisionFaceObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::VisionFaceObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::VisionFaceObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93b90fa2697ed03b7e1dd7001e2d8cff";
  }

  static const char* value(const ::vision_msgs::VisionFaceObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93b90fa2697ed03bULL;
  static const uint64_t static_value2 = 0x7e1dd7001e2d8cffULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/VisionFaceObject";
  }

  static const char* value(const ::vision_msgs::VisionFaceObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id                                    #face id\n\
float32 confidence                           #value in [0,1] indicating the probability of a correct identification\n\
geometry_msgs/Point face_centroid            #Face Centroid (x,y,z)\n\
geometry_msgs/Point[] bounding_box           #Face bounding box 2D \n\
bool smile                                   #smiling face\n\
int8 gender                                  #Gender ID. 0: female, 1: male, 2: unknown\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::vision_msgs::VisionFaceObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.confidence);
      stream.next(m.face_centroid);
      stream.next(m.bounding_box);
      stream.next(m.smile);
      stream.next(m.gender);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisionFaceObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::VisionFaceObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::VisionFaceObject_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "face_centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.face_centroid);
    s << indent << "bounding_box[]" << std::endl;
    for (size_t i = 0; i < v.bounding_box.size(); ++i)
    {
      s << indent << "  bounding_box[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.bounding_box[i]);
    }
    s << indent << "smile: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.smile);
    s << indent << "gender: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gender);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_VISIONFACEOBJECT_H
