// Generated by gencpp from file vision_msgs/Skeleton.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_SKELETON_H
#define VISION_MSGS_MESSAGE_SKELETON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <vision_msgs/SkeletonJoint.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct Skeleton_
{
  typedef Skeleton_<ContainerAllocator> Type;

  Skeleton_()
    : user_id(0)
    , ref_point()
    , joints()  {
    }
  Skeleton_(const ContainerAllocator& _alloc)
    : user_id(0)
    , ref_point(_alloc)
    , joints(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _user_id_type;
  _user_id_type user_id;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _ref_point_type;
  _ref_point_type ref_point;

   typedef std::vector< ::vision_msgs::SkeletonJoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::vision_msgs::SkeletonJoint_<ContainerAllocator> >::other >  _joints_type;
  _joints_type joints;




  typedef boost::shared_ptr< ::vision_msgs::Skeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::Skeleton_<ContainerAllocator> const> ConstPtr;

}; // struct Skeleton_

typedef ::vision_msgs::Skeleton_<std::allocator<void> > Skeleton;

typedef boost::shared_ptr< ::vision_msgs::Skeleton > SkeletonPtr;
typedef boost::shared_ptr< ::vision_msgs::Skeleton const> SkeletonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::Skeleton_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::Skeleton_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'vision_msgs': ['/home/hsr_pumas/HSR_PUMAS/catkin_ws/src/vision/vision_msgs/msg', '/home/hsr_pumas/HSR_PUMAS/catkin_ws/src/vision/vision_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Skeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Skeleton_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Skeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Skeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Skeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Skeleton_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f2d8c1c74d0773f8fb9581c67ba2f2a";
  }

  static const char* value(const ::vision_msgs::Skeleton_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f2d8c1c74d0773fULL;
  static const uint64_t static_value2 = 0x8fb9581c67ba2f2aULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/Skeleton";
  }

  static const char* value(const ::vision_msgs::Skeleton_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 user_id\n\
geometry_msgs/Point32 ref_point\n\
vision_msgs/SkeletonJoint[] joints\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: vision_msgs/SkeletonJoint\n\
std_msgs/String name_joint\n\
geometry_msgs/Vector3 position\n\
geometry_msgs/Quaternion orientation\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::vision_msgs::Skeleton_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::Skeleton_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.user_id);
      stream.next(m.ref_point);
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Skeleton_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::Skeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::Skeleton_<ContainerAllocator>& v)
  {
    s << indent << "user_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.user_id);
    s << indent << "ref_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.ref_point);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vision_msgs::SkeletonJoint_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_SKELETON_H
