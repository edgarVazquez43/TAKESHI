// Generated by gencpp from file vision_msgs/GestureSkeleton.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_GESTURESKELETON_H
#define VISION_MSGS_MESSAGE_GESTURESKELETON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct GestureSkeleton_
{
  typedef GestureSkeleton_<ContainerAllocator> Type;

  GestureSkeleton_()
    : id(0)
    , gesture()
    , gesture_centroid()  {
    }
  GestureSkeleton_(const ContainerAllocator& _alloc)
    : id(0)
    , gesture(_alloc)
    , gesture_centroid(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gesture_type;
  _gesture_type gesture;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gesture_centroid_type;
  _gesture_centroid_type gesture_centroid;




  typedef boost::shared_ptr< ::vision_msgs::GestureSkeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::GestureSkeleton_<ContainerAllocator> const> ConstPtr;

}; // struct GestureSkeleton_

typedef ::vision_msgs::GestureSkeleton_<std::allocator<void> > GestureSkeleton;

typedef boost::shared_ptr< ::vision_msgs::GestureSkeleton > GestureSkeletonPtr;
typedef boost::shared_ptr< ::vision_msgs::GestureSkeleton const> GestureSkeletonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::GestureSkeleton_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'vision_msgs': ['/home/hsr_pumas/HSR_PUMAS/catkin_ws/src/vision/vision_msgs/msg', '/home/hsr_pumas/HSR_PUMAS/catkin_ws/src/vision/vision_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::GestureSkeleton_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::GestureSkeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::GestureSkeleton_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e87d31b651e197f45459ceb0c0353fb";
  }

  static const char* value(const ::vision_msgs::GestureSkeleton_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e87d31b651e197fULL;
  static const uint64_t static_value2 = 0x45459ceb0c0353fbULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/GestureSkeleton";
  }

  static const char* value(const ::vision_msgs::GestureSkeleton_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id		#id of user\n\
string gesture		#gesture of user\n\
geometry_msgs/Point gesture_centroid		#Gesture Centroid (x,y,z)\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::vision_msgs::GestureSkeleton_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.gesture);
      stream.next(m.gesture_centroid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GestureSkeleton_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::GestureSkeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::GestureSkeleton_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "gesture: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gesture);
    s << indent << "gesture_centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gesture_centroid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_GESTURESKELETON_H
