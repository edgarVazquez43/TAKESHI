// Generated by gencpp from file mvn_pln/mp_move_dist_angleResponse.msg
// DO NOT EDIT!


#ifndef MVN_PLN_MESSAGE_MP_MOVE_DIST_ANGLERESPONSE_H
#define MVN_PLN_MESSAGE_MP_MOVE_DIST_ANGLERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace mvn_pln
{
template <class ContainerAllocator>
struct mp_move_dist_angleResponse_
{
  typedef mp_move_dist_angleResponse_<ContainerAllocator> Type;

  mp_move_dist_angleResponse_()
    : traveledBearing()
    , traveledDistance()  {
    }
  mp_move_dist_angleResponse_(const ContainerAllocator& _alloc)
    : traveledBearing(_alloc)
    , traveledDistance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _traveledBearing_type;
  _traveledBearing_type traveledBearing;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _traveledDistance_type;
  _traveledDistance_type traveledDistance;




  typedef boost::shared_ptr< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct mp_move_dist_angleResponse_

typedef ::mvn_pln::mp_move_dist_angleResponse_<std::allocator<void> > mp_move_dist_angleResponse;

typedef boost::shared_ptr< ::mvn_pln::mp_move_dist_angleResponse > mp_move_dist_angleResponsePtr;
typedef boost::shared_ptr< ::mvn_pln::mp_move_dist_angleResponse const> mp_move_dist_angleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mvn_pln

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48d862723389a90b005451cb408b5a44";
  }

  static const char* value(const ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48d862723389a90bULL;
  static const uint64_t static_value2 = 0x005451cb408b5a44ULL;
};

template<class ContainerAllocator>
struct DataType< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mvn_pln/mp_move_dist_angleResponse";
  }

  static const char* value(const ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 traveledBearing\n\
std_msgs/Float32 traveledDistance\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
";
  }

  static const char* value(const ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traveledBearing);
      stream.next(m.traveledDistance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mp_move_dist_angleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mvn_pln::mp_move_dist_angleResponse_<ContainerAllocator>& v)
  {
    s << indent << "traveledBearing: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.traveledBearing);
    s << indent << "traveledDistance: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.traveledDistance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVN_PLN_MESSAGE_MP_MOVE_DIST_ANGLERESPONSE_H
