// Generated by gencpp from file navig_msgs/Location.msg
// DO NOT EDIT!


#ifndef NAVIG_MSGS_MESSAGE_LOCATION_H
#define NAVIG_MSGS_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace navig_msgs
{
template <class ContainerAllocator>
struct Location_
{
  typedef Location_<ContainerAllocator> Type;

  Location_()
    : id()
    , position()
    , orientation(0.0)
    , correct_angle(false)  {
    }
  Location_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , position(_alloc)
    , orientation(0.0)
    , correct_angle(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _orientation_type;
  _orientation_type orientation;

   typedef uint8_t _correct_angle_type;
  _correct_angle_type correct_angle;




  typedef boost::shared_ptr< ::navig_msgs::Location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navig_msgs::Location_<ContainerAllocator> const> ConstPtr;

}; // struct Location_

typedef ::navig_msgs::Location_<std::allocator<void> > Location;

typedef boost::shared_ptr< ::navig_msgs::Location > LocationPtr;
typedef boost::shared_ptr< ::navig_msgs::Location const> LocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navig_msgs::Location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navig_msgs::Location_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navig_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'navig_msgs': ['/home/hsr_pumas/HSR_PUMAS/catkin_ws/src/navigation/navig_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navig_msgs::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navig_msgs::Location_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navig_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navig_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navig_msgs::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navig_msgs::Location_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navig_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89fc57037e6b4762351eee5641dad2f8";
  }

  static const char* value(const ::navig_msgs::Location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89fc57037e6b4762ULL;
  static const uint64_t static_value2 = 0x351eee5641dad2f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::navig_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navig_msgs/Location";
  }

  static const char* value(const ::navig_msgs::Location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navig_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n\
geometry_msgs/Point position\n\
float32 orientation\n\
bool correct_angle\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::navig_msgs::Location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navig_msgs::Location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.correct_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navig_msgs::Location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navig_msgs::Location_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
    s << indent << "correct_angle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.correct_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIG_MSGS_MESSAGE_LOCATION_H
